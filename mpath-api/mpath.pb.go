// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: mpath.proto

package mpath_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MPathSegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alys2SamplesId string     `protobuf:"bytes,1,opt,name=alys2samples_id,json=alys2samplesId,proto3" json:"alys2samples_id,omitempty"`
	Disclaimer     string     `protobuf:"bytes,2,opt,name=disclaimer,proto3" json:"disclaimer,omitempty"`
	DmpSampleId    string     `protobuf:"bytes,3,opt,name=dmp_sample_id,json=dmpSampleId,proto3" json:"dmp_sample_id,omitempty"`
	SegData        []*SegData `protobuf:"bytes,4,rep,name=seg_data,json=segData,proto3" json:"seg_data,omitempty"`
}

func (x *MPathSegData) Reset() {
	*x = MPathSegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPathSegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPathSegData) ProtoMessage() {}

func (x *MPathSegData) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPathSegData.ProtoReflect.Descriptor instead.
func (*MPathSegData) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{0}
}

func (x *MPathSegData) GetAlys2SamplesId() string {
	if x != nil {
		return x.Alys2SamplesId
	}
	return ""
}

func (x *MPathSegData) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

func (x *MPathSegData) GetDmpSampleId() string {
	if x != nil {
		return x.DmpSampleId
	}
	return ""
}

func (x *MPathSegData) GetSegData() []*SegData {
	if x != nil {
		return x.SegData
	}
	return nil
}

type SegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chromosome string `protobuf:"bytes,1,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	LocusStart string `protobuf:"bytes,2,opt,name=locus_start,json=locusStart,proto3" json:"locus_start,omitempty"`
	LocusEnd   string `protobuf:"bytes,3,opt,name=locus_end,json=locusEnd,proto3" json:"locus_end,omitempty"`
	NumMark    string `protobuf:"bytes,4,opt,name=num_mark,json=numMark,proto3" json:"num_mark,omitempty"`
	SegMean    string `protobuf:"bytes,5,opt,name=seg_mean,json=segMean,proto3" json:"seg_mean,omitempty"`
}

func (x *SegData) Reset() {
	*x = SegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegData) ProtoMessage() {}

func (x *SegData) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegData.ProtoReflect.Descriptor instead.
func (*SegData) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{1}
}

func (x *SegData) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *SegData) GetLocusStart() string {
	if x != nil {
		return x.LocusStart
	}
	return ""
}

func (x *SegData) GetLocusEnd() string {
	if x != nil {
		return x.LocusEnd
	}
	return ""
}

func (x *SegData) GetNumMark() string {
	if x != nil {
		return x.NumMark
	}
	return ""
}

func (x *SegData) GetSegMean() string {
	if x != nil {
		return x.SegMean
	}
	return ""
}

type MPathVariantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleCount uint32             `protobuf:"varint,1,opt,name=sample_count,json=sample-count,proto3" json:"sample_count,omitempty"`
	Results     map[string]*Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Disclaimer  string             `protobuf:"bytes,3,opt,name=disclaimer,proto3" json:"disclaimer,omitempty"`
}

func (x *MPathVariantData) Reset() {
	*x = MPathVariantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPathVariantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPathVariantData) ProtoMessage() {}

func (x *MPathVariantData) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPathVariantData.ProtoReflect.Descriptor instead.
func (*MPathVariantData) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{2}
}

func (x *MPathVariantData) GetSampleCount() uint32 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

func (x *MPathVariantData) GetResults() map[string]*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MPathVariantData) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnpIndelSilentNp      []*Snp                   `protobuf:"bytes,1,rep,name=snp_indel_silent_np,json=snp-indel-silent-np,proto3" json:"snp_indel_silent_np,omitempty"`
	CnvVariants           []*CnvVariants           `protobuf:"bytes,2,rep,name=cnv_variants,json=cnv-variants,proto3" json:"cnv_variants,omitempty"`
	SnpIndelSilent        []*Snp                   `protobuf:"bytes,3,rep,name=snp_indel_silent,json=snp-indel-silent,proto3" json:"snp_indel_silent,omitempty"`
	MetaData              *MetaData                `protobuf:"bytes,4,opt,name=meta_data,json=meta-data,proto3" json:"meta_data,omitempty"`
	SnpIndelExonic        []*Snp                   `protobuf:"bytes,5,rep,name=snp_indel_exonic,json=snp-indel-exonic,proto3" json:"snp_indel_exonic,omitempty"`
	CnvIntragenicVariants []*CnvIntragenicVariants `protobuf:"bytes,6,rep,name=cnv_intragenic_variants,json=cnv-intragenic-variants,proto3" json:"cnv_intragenic_variants,omitempty"`
	SvVariants            []*SvVariants            `protobuf:"bytes,7,rep,name=sv_variants,json=sv-variants,proto3" json:"sv_variants,omitempty"`
	SnpIndelExonicNp      []*Snp                   `protobuf:"bytes,8,rep,name=snp_indel_exonic_np,json=snp-indel-exonic-np,proto3" json:"snp_indel_exonic_np,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetSnpIndelSilentNp() []*Snp {
	if x != nil {
		return x.SnpIndelSilentNp
	}
	return nil
}

func (x *Result) GetCnvVariants() []*CnvVariants {
	if x != nil {
		return x.CnvVariants
	}
	return nil
}

func (x *Result) GetSnpIndelSilent() []*Snp {
	if x != nil {
		return x.SnpIndelSilent
	}
	return nil
}

func (x *Result) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *Result) GetSnpIndelExonic() []*Snp {
	if x != nil {
		return x.SnpIndelExonic
	}
	return nil
}

func (x *Result) GetCnvIntragenicVariants() []*CnvIntragenicVariants {
	if x != nil {
		return x.CnvIntragenicVariants
	}
	return nil
}

func (x *Result) GetSvVariants() []*SvVariants {
	if x != nil {
		return x.SvVariants
	}
	return nil
}

func (x *Result) GetSnpIndelExonicNp() []*Snp {
	if x != nil {
		return x.SnpIndelExonicNp
	}
	return nil
}

type Snp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AaChange             string     `protobuf:"bytes,1,opt,name=aa_change,json=aaChange,proto3" json:"aa_change,omitempty"`
	AltAllele            string     `protobuf:"bytes,2,opt,name=alt_allele,json=altAllele,proto3" json:"alt_allele,omitempty"`
	CDNAChange           string     `protobuf:"bytes,3,opt,name=cDNA_change,json=cDNAChange,proto3" json:"cDNA_change,omitempty"`
	Chromosome           string     `protobuf:"bytes,4,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	ClinicalSignedOut    string     `protobuf:"bytes,5,opt,name=clinical_signed_out,json=clinical-signed-out,proto3" json:"clinical_signed_out,omitempty"`
	Comments             string     `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
	ConfidenceClass      string     `protobuf:"bytes,7,opt,name=confidence_class,json=confidenceClass,proto3" json:"confidence_class,omitempty"`
	ConfidenceCvId       uint32     `protobuf:"varint,8,opt,name=confidence_cv_id,json=confidenceCvId,proto3" json:"confidence_cv_id,omitempty"`
	CosmicId             string     `protobuf:"bytes,9,opt,name=cosmic_id,json=cosmicId,proto3" json:"cosmic_id,omitempty"`
	DTumorAd             *anypb.Any `protobuf:"bytes,10,opt,name=d_tumor_ad,json=dTumorAd,proto3" json:"d_tumor_ad,omitempty"`
	DTumorDp             *anypb.Any `protobuf:"bytes,11,opt,name=d_tumor_dp,json=dTumorDp,proto3" json:"d_tumor_dp,omitempty"`
	DTumorRd             *anypb.Any `protobuf:"bytes,12,opt,name=d_tumor_rd,json=dTumorRd,proto3" json:"d_tumor_rd,omitempty"`
	DTumorVfreq          *anypb.Any `protobuf:"bytes,13,opt,name=d_tumor_vfreq,json=dTumorVfreq,proto3" json:"d_tumor_vfreq,omitempty"`
	DbSNPId              string     `protobuf:"bytes,14,opt,name=dbSNP_id,json=dbSNPId,proto3" json:"dbSNP_id,omitempty"`
	DmpSampleMrevId      uint32     `protobuf:"varint,15,opt,name=dmp_sample_mrev_id,json=dmpSampleMrevId,proto3" json:"dmp_sample_mrev_id,omitempty"`
	DmpSampleSoId        uint32     `protobuf:"varint,16,opt,name=dmp_sample_so_id,json=dmpSampleSoId,proto3" json:"dmp_sample_so_id,omitempty"`
	DmpVariantId         uint32     `protobuf:"varint,17,opt,name=dmp_variant_id,json=dmpVariantId,proto3" json:"dmp_variant_id,omitempty"`
	ExonNum              string     `protobuf:"bytes,18,opt,name=exon_num,json=exonNum,proto3" json:"exon_num,omitempty"`
	GeneId               string     `protobuf:"bytes,19,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	IsHotspot            uint32     `protobuf:"varint,20,opt,name=is_hotspot,json=isHotspot,proto3" json:"is_hotspot,omitempty"`
	IsReported           uint32     `protobuf:"varint,21,opt,name=is_reported,json=isReported,proto3" json:"is_reported,omitempty"`
	Level                string     `protobuf:"bytes,22,opt,name=level,proto3" json:"level,omitempty"`
	Mafreq_1000G         string     `protobuf:"bytes,23,opt,name=mafreq_1000g,json=mafreq1000g,proto3" json:"mafreq_1000g,omitempty"`
	MrevComments         string     `protobuf:"bytes,24,opt,name=mrev_comments,json=mrevComments,proto3" json:"mrev_comments,omitempty"`
	MrevStatusCvId       uint32     `protobuf:"varint,25,opt,name=mrev_status_cv_id,json=mrevStatusCvId,proto3" json:"mrev_status_cv_id,omitempty"`
	MrevStatusName       string     `protobuf:"bytes,26,opt,name=mrev_status_name,json=mrevStatusName,proto3" json:"mrev_status_name,omitempty"`
	NormalAd             uint32     `protobuf:"varint,27,opt,name=normal_ad,json=normalAd,proto3" json:"normal_ad,omitempty"`
	NormalDp             uint32     `protobuf:"varint,28,opt,name=normal_dp,json=normalDp,proto3" json:"normal_dp,omitempty"`
	NormalVfreq          float64    `protobuf:"fixed64,29,opt,name=normal_vfreq,json=normalVfreq,proto3" json:"normal_vfreq,omitempty"`
	OccuranceInNormal    string     `protobuf:"bytes,30,opt,name=occurance_in_normal,json=occuranceInNormal,proto3" json:"occurance_in_normal,omitempty"`
	OccuranceInPop       string     `protobuf:"bytes,31,opt,name=occurance_in_pop,json=occuranceInPop,proto3" json:"occurance_in_pop,omitempty"`
	Oncogenic            string     `protobuf:"bytes,32,opt,name=oncogenic,proto3" json:"oncogenic,omitempty"`
	OncokbInterpretation string     `protobuf:"bytes,33,opt,name=oncokb_interpretation,json=oncokbInterpretation,proto3" json:"oncokb_interpretation,omitempty"`
	OncokbReported       uint32     `protobuf:"varint,34,opt,name=oncokb_reported,json=oncokbReported,proto3" json:"oncokb_reported,omitempty"`
	OncokbVer            string     `protobuf:"bytes,35,opt,name=oncokb_ver,json=oncokbVer,proto3" json:"oncokb_ver,omitempty"`
	RefAllele            string     `protobuf:"bytes,36,opt,name=ref_allele,json=refAllele,proto3" json:"ref_allele,omitempty"`
	Rlevel               string     `protobuf:"bytes,37,opt,name=rlevel,proto3" json:"rlevel,omitempty"`
	STumorAd             *anypb.Any `protobuf:"bytes,38,opt,name=s_tumor_ad,json=sTumorAd,proto3" json:"s_tumor_ad,omitempty"`
	STumorDp             *anypb.Any `protobuf:"bytes,39,opt,name=s_tumor_dp,json=sTumorDp,proto3" json:"s_tumor_dp,omitempty"`
	STumorRd             *anypb.Any `protobuf:"bytes,40,opt,name=s_tumor_rd,json=sTumorRd,proto3" json:"s_tumor_rd,omitempty"`
	STumorVfreq          *anypb.Any `protobuf:"bytes,41,opt,name=s_tumor_vfreq,json=sTumorVfreq,proto3" json:"s_tumor_vfreq,omitempty"`
	SnpIndelToolName     string     `protobuf:"bytes,42,opt,name=snp_indel_tool_name,json=snpIndelToolName,proto3" json:"snp_indel_tool_name,omitempty"`
	SnpIndelVariantId    uint32     `protobuf:"varint,43,opt,name=snp_indel_variant_id,json=snpIndelVariantId,proto3" json:"snp_indel_variant_id,omitempty"`
	SoComments           string     `protobuf:"bytes,44,opt,name=so_comments,json=soComments,proto3" json:"so_comments,omitempty"`
	SoStatusCvId         uint32     `protobuf:"varint,45,opt,name=so_status_cv_id,json=soStatusCvId,proto3" json:"so_status_cv_id,omitempty"`
	SoStatusName         string     `protobuf:"bytes,46,opt,name=so_status_name,json=soStatusName,proto3" json:"so_status_name,omitempty"`
	StartPosition        uint32     `protobuf:"varint,47,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	TranscriptId         string     `protobuf:"bytes,48,opt,name=transcript_id,json=transcriptId,proto3" json:"transcript_id,omitempty"`
	Treatments           string     `protobuf:"bytes,49,opt,name=treatments,proto3" json:"treatments,omitempty"`
	TumorAd              uint32     `protobuf:"varint,50,opt,name=tumor_ad,json=tumorAd,proto3" json:"tumor_ad,omitempty"`
	TumorDp              uint32     `protobuf:"varint,51,opt,name=tumor_dp,json=tumorDp,proto3" json:"tumor_dp,omitempty"`
	TumorVfreq           float64    `protobuf:"fixed64,52,opt,name=tumor_vfreq,json=tumorVfreq,proto3" json:"tumor_vfreq,omitempty"`
	VariantClass         string     `protobuf:"bytes,53,opt,name=variant_class,json=variantClass,proto3" json:"variant_class,omitempty"`
	VariantClassCvId     uint32     `protobuf:"varint,54,opt,name=variant_class_cv_id,json=variantClassCvId,proto3" json:"variant_class_cv_id,omitempty"`
	VariantStatusCvId    uint32     `protobuf:"varint,55,opt,name=variant_status_cv_id,json=variantStatusCvId,proto3" json:"variant_status_cv_id,omitempty"`
	VariantStatusName    string     `protobuf:"bytes,56,opt,name=variant_status_name,json=variantStatusName,proto3" json:"variant_status_name,omitempty"`
}

func (x *Snp) Reset() {
	*x = Snp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snp) ProtoMessage() {}

func (x *Snp) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snp.ProtoReflect.Descriptor instead.
func (*Snp) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{4}
}

func (x *Snp) GetAaChange() string {
	if x != nil {
		return x.AaChange
	}
	return ""
}

func (x *Snp) GetAltAllele() string {
	if x != nil {
		return x.AltAllele
	}
	return ""
}

func (x *Snp) GetCDNAChange() string {
	if x != nil {
		return x.CDNAChange
	}
	return ""
}

func (x *Snp) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *Snp) GetClinicalSignedOut() string {
	if x != nil {
		return x.ClinicalSignedOut
	}
	return ""
}

func (x *Snp) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *Snp) GetConfidenceClass() string {
	if x != nil {
		return x.ConfidenceClass
	}
	return ""
}

func (x *Snp) GetConfidenceCvId() uint32 {
	if x != nil {
		return x.ConfidenceCvId
	}
	return 0
}

func (x *Snp) GetCosmicId() string {
	if x != nil {
		return x.CosmicId
	}
	return ""
}

func (x *Snp) GetDTumorAd() *anypb.Any {
	if x != nil {
		return x.DTumorAd
	}
	return nil
}

func (x *Snp) GetDTumorDp() *anypb.Any {
	if x != nil {
		return x.DTumorDp
	}
	return nil
}

func (x *Snp) GetDTumorRd() *anypb.Any {
	if x != nil {
		return x.DTumorRd
	}
	return nil
}

func (x *Snp) GetDTumorVfreq() *anypb.Any {
	if x != nil {
		return x.DTumorVfreq
	}
	return nil
}

func (x *Snp) GetDbSNPId() string {
	if x != nil {
		return x.DbSNPId
	}
	return ""
}

func (x *Snp) GetDmpSampleMrevId() uint32 {
	if x != nil {
		return x.DmpSampleMrevId
	}
	return 0
}

func (x *Snp) GetDmpSampleSoId() uint32 {
	if x != nil {
		return x.DmpSampleSoId
	}
	return 0
}

func (x *Snp) GetDmpVariantId() uint32 {
	if x != nil {
		return x.DmpVariantId
	}
	return 0
}

func (x *Snp) GetExonNum() string {
	if x != nil {
		return x.ExonNum
	}
	return ""
}

func (x *Snp) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *Snp) GetIsHotspot() uint32 {
	if x != nil {
		return x.IsHotspot
	}
	return 0
}

func (x *Snp) GetIsReported() uint32 {
	if x != nil {
		return x.IsReported
	}
	return 0
}

func (x *Snp) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Snp) GetMafreq_1000G() string {
	if x != nil {
		return x.Mafreq_1000G
	}
	return ""
}

func (x *Snp) GetMrevComments() string {
	if x != nil {
		return x.MrevComments
	}
	return ""
}

func (x *Snp) GetMrevStatusCvId() uint32 {
	if x != nil {
		return x.MrevStatusCvId
	}
	return 0
}

func (x *Snp) GetMrevStatusName() string {
	if x != nil {
		return x.MrevStatusName
	}
	return ""
}

func (x *Snp) GetNormalAd() uint32 {
	if x != nil {
		return x.NormalAd
	}
	return 0
}

func (x *Snp) GetNormalDp() uint32 {
	if x != nil {
		return x.NormalDp
	}
	return 0
}

func (x *Snp) GetNormalVfreq() float64 {
	if x != nil {
		return x.NormalVfreq
	}
	return 0
}

func (x *Snp) GetOccuranceInNormal() string {
	if x != nil {
		return x.OccuranceInNormal
	}
	return ""
}

func (x *Snp) GetOccuranceInPop() string {
	if x != nil {
		return x.OccuranceInPop
	}
	return ""
}

func (x *Snp) GetOncogenic() string {
	if x != nil {
		return x.Oncogenic
	}
	return ""
}

func (x *Snp) GetOncokbInterpretation() string {
	if x != nil {
		return x.OncokbInterpretation
	}
	return ""
}

func (x *Snp) GetOncokbReported() uint32 {
	if x != nil {
		return x.OncokbReported
	}
	return 0
}

func (x *Snp) GetOncokbVer() string {
	if x != nil {
		return x.OncokbVer
	}
	return ""
}

func (x *Snp) GetRefAllele() string {
	if x != nil {
		return x.RefAllele
	}
	return ""
}

func (x *Snp) GetRlevel() string {
	if x != nil {
		return x.Rlevel
	}
	return ""
}

func (x *Snp) GetSTumorAd() *anypb.Any {
	if x != nil {
		return x.STumorAd
	}
	return nil
}

func (x *Snp) GetSTumorDp() *anypb.Any {
	if x != nil {
		return x.STumorDp
	}
	return nil
}

func (x *Snp) GetSTumorRd() *anypb.Any {
	if x != nil {
		return x.STumorRd
	}
	return nil
}

func (x *Snp) GetSTumorVfreq() *anypb.Any {
	if x != nil {
		return x.STumorVfreq
	}
	return nil
}

func (x *Snp) GetSnpIndelToolName() string {
	if x != nil {
		return x.SnpIndelToolName
	}
	return ""
}

func (x *Snp) GetSnpIndelVariantId() uint32 {
	if x != nil {
		return x.SnpIndelVariantId
	}
	return 0
}

func (x *Snp) GetSoComments() string {
	if x != nil {
		return x.SoComments
	}
	return ""
}

func (x *Snp) GetSoStatusCvId() uint32 {
	if x != nil {
		return x.SoStatusCvId
	}
	return 0
}

func (x *Snp) GetSoStatusName() string {
	if x != nil {
		return x.SoStatusName
	}
	return ""
}

func (x *Snp) GetStartPosition() uint32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Snp) GetTranscriptId() string {
	if x != nil {
		return x.TranscriptId
	}
	return ""
}

func (x *Snp) GetTreatments() string {
	if x != nil {
		return x.Treatments
	}
	return ""
}

func (x *Snp) GetTumorAd() uint32 {
	if x != nil {
		return x.TumorAd
	}
	return 0
}

func (x *Snp) GetTumorDp() uint32 {
	if x != nil {
		return x.TumorDp
	}
	return 0
}

func (x *Snp) GetTumorVfreq() float64 {
	if x != nil {
		return x.TumorVfreq
	}
	return 0
}

func (x *Snp) GetVariantClass() string {
	if x != nil {
		return x.VariantClass
	}
	return ""
}

func (x *Snp) GetVariantClassCvId() uint32 {
	if x != nil {
		return x.VariantClassCvId
	}
	return 0
}

func (x *Snp) GetVariantStatusCvId() uint32 {
	if x != nil {
		return x.VariantStatusCvId
	}
	return 0
}

func (x *Snp) GetVariantStatusName() string {
	if x != nil {
		return x.VariantStatusName
	}
	return ""
}

type CnvVariants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chromosome           string     `protobuf:"bytes,1,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	ClinicalSignedOut    string     `protobuf:"bytes,2,opt,name=clinical_signed_out,json=clinical-signed-out,proto3" json:"clinical_signed_out,omitempty"`
	CnvClassCvId         uint32     `protobuf:"varint,3,opt,name=cnv_class_cv_id,json=cnvClassCvId,proto3" json:"cnv_class_cv_id,omitempty"`
	CnvClassName         string     `protobuf:"bytes,4,opt,name=cnv_class_name,json=cnvClassName,proto3" json:"cnv_class_name,omitempty"`
	CnvFilterCvId        uint32     `protobuf:"varint,5,opt,name=cnv_filter_cv_id,json=cnvFilterCvId,proto3" json:"cnv_filter_cv_id,omitempty"`
	CnvFilterName        string     `protobuf:"bytes,6,opt,name=cnv_filter_name,json=cnvFilterName,proto3" json:"cnv_filter_name,omitempty"`
	CnvVariantId         uint32     `protobuf:"varint,7,opt,name=cnv_variant_id,json=cnvVariantId,proto3" json:"cnv_variant_id,omitempty"`
	Comments             string     `protobuf:"bytes,8,opt,name=comments,proto3" json:"comments,omitempty"`
	ConfidenceClass      string     `protobuf:"bytes,9,opt,name=confidence_class,json=confidenceClass,proto3" json:"confidence_class,omitempty"`
	ConfidenceCvId       uint32     `protobuf:"varint,10,opt,name=confidence_cv_id,json=confidenceCvId,proto3" json:"confidence_cv_id,omitempty"`
	Cytoband             string     `protobuf:"bytes,11,opt,name=cytoband,proto3" json:"cytoband,omitempty"`
	GeneFoldChange       float64    `protobuf:"fixed64,12,opt,name=gene_fold_change,json=geneFoldChange,proto3" json:"gene_fold_change,omitempty"`
	GeneId               string     `protobuf:"bytes,13,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	GenePValue           float64    `protobuf:"fixed64,14,opt,name=gene_p_value,json=genePValue,proto3" json:"gene_p_value,omitempty"`
	IsReported           uint32     `protobuf:"varint,15,opt,name=is_reported,json=isReported,proto3" json:"is_reported,omitempty"`
	IsSignificant        uint32     `protobuf:"varint,16,opt,name=is_significant,json=isSignificant,proto3" json:"is_significant,omitempty"`
	Level                string     `protobuf:"bytes,17,opt,name=level,proto3" json:"level,omitempty"`
	Oncogenic            string     `protobuf:"bytes,18,opt,name=oncogenic,proto3" json:"oncogenic,omitempty"`
	OncokbInterpretation string     `protobuf:"bytes,19,opt,name=oncokb_interpretation,json=oncokbInterpretation,proto3" json:"oncokb_interpretation,omitempty"`
	OncokbReported       uint32     `protobuf:"varint,20,opt,name=oncokb_reported,json=oncokbReported,proto3" json:"oncokb_reported,omitempty"`
	OncokbVer            string     `protobuf:"bytes,21,opt,name=oncokb_ver,json=oncokbVer,proto3" json:"oncokb_ver,omitempty"`
	Rlevel               *anypb.Any `protobuf:"bytes,22,opt,name=rlevel,proto3" json:"rlevel,omitempty"`
	Treatments           string     `protobuf:"bytes,23,opt,name=treatments,proto3" json:"treatments,omitempty"`
	VariantStatusCvId    uint32     `protobuf:"varint,24,opt,name=variant_status_cv_id,json=variantStatusCvId,proto3" json:"variant_status_cv_id,omitempty"`
	VariantStatusName    string     `protobuf:"bytes,25,opt,name=variant_status_name,json=variantStatusName,proto3" json:"variant_status_name,omitempty"`
}

func (x *CnvVariants) Reset() {
	*x = CnvVariants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnvVariants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnvVariants) ProtoMessage() {}

func (x *CnvVariants) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnvVariants.ProtoReflect.Descriptor instead.
func (*CnvVariants) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{5}
}

func (x *CnvVariants) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *CnvVariants) GetClinicalSignedOut() string {
	if x != nil {
		return x.ClinicalSignedOut
	}
	return ""
}

func (x *CnvVariants) GetCnvClassCvId() uint32 {
	if x != nil {
		return x.CnvClassCvId
	}
	return 0
}

func (x *CnvVariants) GetCnvClassName() string {
	if x != nil {
		return x.CnvClassName
	}
	return ""
}

func (x *CnvVariants) GetCnvFilterCvId() uint32 {
	if x != nil {
		return x.CnvFilterCvId
	}
	return 0
}

func (x *CnvVariants) GetCnvFilterName() string {
	if x != nil {
		return x.CnvFilterName
	}
	return ""
}

func (x *CnvVariants) GetCnvVariantId() uint32 {
	if x != nil {
		return x.CnvVariantId
	}
	return 0
}

func (x *CnvVariants) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *CnvVariants) GetConfidenceClass() string {
	if x != nil {
		return x.ConfidenceClass
	}
	return ""
}

func (x *CnvVariants) GetConfidenceCvId() uint32 {
	if x != nil {
		return x.ConfidenceCvId
	}
	return 0
}

func (x *CnvVariants) GetCytoband() string {
	if x != nil {
		return x.Cytoband
	}
	return ""
}

func (x *CnvVariants) GetGeneFoldChange() float64 {
	if x != nil {
		return x.GeneFoldChange
	}
	return 0
}

func (x *CnvVariants) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *CnvVariants) GetGenePValue() float64 {
	if x != nil {
		return x.GenePValue
	}
	return 0
}

func (x *CnvVariants) GetIsReported() uint32 {
	if x != nil {
		return x.IsReported
	}
	return 0
}

func (x *CnvVariants) GetIsSignificant() uint32 {
	if x != nil {
		return x.IsSignificant
	}
	return 0
}

func (x *CnvVariants) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CnvVariants) GetOncogenic() string {
	if x != nil {
		return x.Oncogenic
	}
	return ""
}

func (x *CnvVariants) GetOncokbInterpretation() string {
	if x != nil {
		return x.OncokbInterpretation
	}
	return ""
}

func (x *CnvVariants) GetOncokbReported() uint32 {
	if x != nil {
		return x.OncokbReported
	}
	return 0
}

func (x *CnvVariants) GetOncokbVer() string {
	if x != nil {
		return x.OncokbVer
	}
	return ""
}

func (x *CnvVariants) GetRlevel() *anypb.Any {
	if x != nil {
		return x.Rlevel
	}
	return nil
}

func (x *CnvVariants) GetTreatments() string {
	if x != nil {
		return x.Treatments
	}
	return ""
}

func (x *CnvVariants) GetVariantStatusCvId() uint32 {
	if x != nil {
		return x.VariantStatusCvId
	}
	return 0
}

func (x *CnvVariants) GetVariantStatusName() string {
	if x != nil {
		return x.VariantStatusName
	}
	return ""
}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alys2SampleId       uint32  `protobuf:"varint,1,opt,name=alys2sample_id,json=alys2sampleId,proto3" json:"alys2sample_id,omitempty"`
	CbxPatientId        uint32  `protobuf:"varint,2,opt,name=cbx_patient_id,json=cbxPatientId,proto3" json:"cbx_patient_id,omitempty"`
	CbxSampleId         uint32  `protobuf:"varint,3,opt,name=cbx_sample_id,json=cbxSampleId,proto3" json:"cbx_sample_id,omitempty"`
	ConsentParta        bool    `protobuf:"varint,4,opt,name=consent_parta,json=consent-parta,proto3" json:"consent_parta,omitempty"`
	ConsentPartc        bool    `protobuf:"varint,5,opt,name=consent_partc,json=consent-partc,proto3" json:"consent_partc,omitempty"`
	DateTumorSequencing string  `protobuf:"bytes,6,opt,name=date_tumor_sequencing,json=dateTumorSequencing,proto3" json:"date_tumor_sequencing,omitempty"`
	DmpAlysTaskId       uint32  `protobuf:"varint,7,opt,name=dmp_alys_task_id,json=dmpAlysTaskId,proto3" json:"dmp_alys_task_id,omitempty"`
	DmpAlysTaskName     string  `protobuf:"bytes,8,opt,name=dmp_alys_task_name,json=dmpAlysTaskName,proto3" json:"dmp_alys_task_name,omitempty"`
	DmpPatientId        string  `protobuf:"bytes,9,opt,name=dmp_patient_id,json=dmpPatientId,proto3" json:"dmp_patient_id,omitempty"`
	DmpSampleId         string  `protobuf:"bytes,10,opt,name=dmp_sample_id,json=dmpSampleId,proto3" json:"dmp_sample_id,omitempty"`
	DmpSampleSoId       uint32  `protobuf:"varint,11,opt,name=dmp_sample_so_id,json=dmpSampleSoId,proto3" json:"dmp_sample_so_id,omitempty"`
	DtAlysEndTime       string  `protobuf:"bytes,12,opt,name=dt_alys_end_time,json=dtAlysEndTime,proto3" json:"dt_alys_end_time,omitempty"`
	DtDmsStartTime      string  `protobuf:"bytes,13,opt,name=dt_dms_start_time,json=dtDmsStartTime,proto3" json:"dt_dms_start_time,omitempty"`
	Gender              uint32  `protobuf:"varint,14,opt,name=gender,proto3" json:"gender,omitempty"`
	GenePanel           string  `protobuf:"bytes,15,opt,name=gene_panel,json=gene-panel,proto3" json:"gene_panel,omitempty"`
	IsMetastasis        uint32  `protobuf:"varint,16,opt,name=is_metastasis,json=isMetastasis,proto3" json:"is_metastasis,omitempty"`
	LegacyPatientId     string  `protobuf:"bytes,17,opt,name=legacy_patient_id,json=legacyPatientId,proto3" json:"legacy_patient_id,omitempty"`
	LegacySampleId      string  `protobuf:"bytes,18,opt,name=legacy_sample_id,json=legacySampleId,proto3" json:"legacy_sample_id,omitempty"`
	MetastasisSite      string  `protobuf:"bytes,19,opt,name=metastasis_site,json=metastasisSite,proto3" json:"metastasis_site,omitempty"`
	MrevComments        string  `protobuf:"bytes,20,opt,name=mrev_comments,json=mrevComments,proto3" json:"mrev_comments,omitempty"`
	MrevStatusName      string  `protobuf:"bytes,21,opt,name=mrev_status_name,json=mrevStatusName,proto3" json:"mrev_status_name,omitempty"`
	MsiComment          string  `protobuf:"bytes,22,opt,name=msi_comment,json=msi-comment,proto3" json:"msi_comment,omitempty"`
	MsiScore            float64 `protobuf:"fixed64,23,opt,name=msi_score,json=msi-score,proto3" json:"msi_score,omitempty"`
	MsiType             string  `protobuf:"bytes,24,opt,name=msi_type,json=msi-type,proto3" json:"msi_type,omitempty"`
	OutsideInstitute    string  `protobuf:"bytes,25,opt,name=outside_institute,json=outsideInstitute,proto3" json:"outside_institute,omitempty"`
	PrimarySite         string  `protobuf:"bytes,26,opt,name=primary_site,json=primarySite,proto3" json:"primary_site,omitempty"`
	RetrieveStatus      uint32  `protobuf:"varint,27,opt,name=retrieve_status,json=retrieveStatus,proto3" json:"retrieve_status,omitempty"`
	SampleCoverage      uint32  `protobuf:"varint,28,opt,name=sample_coverage,json=sampleCoverage,proto3" json:"sample_coverage,omitempty"`
	SlideViewerId       string  `protobuf:"bytes,29,opt,name=slide_viewer_id,json=slide-viewer-id,proto3" json:"slide_viewer_id,omitempty"`
	SoComments          string  `protobuf:"bytes,30,opt,name=so_comments,json=soComments,proto3" json:"so_comments,omitempty"`
	SoStatusName        string  `protobuf:"bytes,31,opt,name=so_status_name,json=soStatusName,proto3" json:"so_status_name,omitempty"`
	SomaticStatus       string  `protobuf:"bytes,32,opt,name=somatic_status,json=somaticStatus,proto3" json:"somatic_status,omitempty"`
	TmbCohort           float64 `protobuf:"fixed64,33,opt,name=tmb_cohort,json=tmbCohort,proto3" json:"tmb_cohort,omitempty"`
	TmbCohortPercentile float64 `protobuf:"fixed64,34,opt,name=tmb_cohort_percentile,json=tmbCohortPercentile,proto3" json:"tmb_cohort_percentile,omitempty"`
	TmbScore            float64 `protobuf:"fixed64,35,opt,name=tmb_score,json=tmbScore,proto3" json:"tmb_score,omitempty"`
	TmbTtCohort         float64 `protobuf:"fixed64,36,opt,name=tmb_tt_cohort,json=tmbTtCohort,proto3" json:"tmb_tt_cohort,omitempty"`
	TmbTtPercentile     float64 `protobuf:"fixed64,37,opt,name=tmb_tt_percentile,json=tmbTtPercentile,proto3" json:"tmb_tt_percentile,omitempty"`
	TumorPurity         string  `protobuf:"bytes,38,opt,name=tumor_purity,json=tumorPurity,proto3" json:"tumor_purity,omitempty"`
	TumorTypeCode       string  `protobuf:"bytes,39,opt,name=tumor_type_code,json=tumorTypeCode,proto3" json:"tumor_type_code,omitempty"`
	TumorTypeName       string  `protobuf:"bytes,40,opt,name=tumor_type_name,json=tumorTypeName,proto3" json:"tumor_type_name,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{6}
}

func (x *MetaData) GetAlys2SampleId() uint32 {
	if x != nil {
		return x.Alys2SampleId
	}
	return 0
}

func (x *MetaData) GetCbxPatientId() uint32 {
	if x != nil {
		return x.CbxPatientId
	}
	return 0
}

func (x *MetaData) GetCbxSampleId() uint32 {
	if x != nil {
		return x.CbxSampleId
	}
	return 0
}

func (x *MetaData) GetConsentParta() bool {
	if x != nil {
		return x.ConsentParta
	}
	return false
}

func (x *MetaData) GetConsentPartc() bool {
	if x != nil {
		return x.ConsentPartc
	}
	return false
}

func (x *MetaData) GetDateTumorSequencing() string {
	if x != nil {
		return x.DateTumorSequencing
	}
	return ""
}

func (x *MetaData) GetDmpAlysTaskId() uint32 {
	if x != nil {
		return x.DmpAlysTaskId
	}
	return 0
}

func (x *MetaData) GetDmpAlysTaskName() string {
	if x != nil {
		return x.DmpAlysTaskName
	}
	return ""
}

func (x *MetaData) GetDmpPatientId() string {
	if x != nil {
		return x.DmpPatientId
	}
	return ""
}

func (x *MetaData) GetDmpSampleId() string {
	if x != nil {
		return x.DmpSampleId
	}
	return ""
}

func (x *MetaData) GetDmpSampleSoId() uint32 {
	if x != nil {
		return x.DmpSampleSoId
	}
	return 0
}

func (x *MetaData) GetDtAlysEndTime() string {
	if x != nil {
		return x.DtAlysEndTime
	}
	return ""
}

func (x *MetaData) GetDtDmsStartTime() string {
	if x != nil {
		return x.DtDmsStartTime
	}
	return ""
}

func (x *MetaData) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *MetaData) GetGenePanel() string {
	if x != nil {
		return x.GenePanel
	}
	return ""
}

func (x *MetaData) GetIsMetastasis() uint32 {
	if x != nil {
		return x.IsMetastasis
	}
	return 0
}

func (x *MetaData) GetLegacyPatientId() string {
	if x != nil {
		return x.LegacyPatientId
	}
	return ""
}

func (x *MetaData) GetLegacySampleId() string {
	if x != nil {
		return x.LegacySampleId
	}
	return ""
}

func (x *MetaData) GetMetastasisSite() string {
	if x != nil {
		return x.MetastasisSite
	}
	return ""
}

func (x *MetaData) GetMrevComments() string {
	if x != nil {
		return x.MrevComments
	}
	return ""
}

func (x *MetaData) GetMrevStatusName() string {
	if x != nil {
		return x.MrevStatusName
	}
	return ""
}

func (x *MetaData) GetMsiComment() string {
	if x != nil {
		return x.MsiComment
	}
	return ""
}

func (x *MetaData) GetMsiScore() float64 {
	if x != nil {
		return x.MsiScore
	}
	return 0
}

func (x *MetaData) GetMsiType() string {
	if x != nil {
		return x.MsiType
	}
	return ""
}

func (x *MetaData) GetOutsideInstitute() string {
	if x != nil {
		return x.OutsideInstitute
	}
	return ""
}

func (x *MetaData) GetPrimarySite() string {
	if x != nil {
		return x.PrimarySite
	}
	return ""
}

func (x *MetaData) GetRetrieveStatus() uint32 {
	if x != nil {
		return x.RetrieveStatus
	}
	return 0
}

func (x *MetaData) GetSampleCoverage() uint32 {
	if x != nil {
		return x.SampleCoverage
	}
	return 0
}

func (x *MetaData) GetSlideViewerId() string {
	if x != nil {
		return x.SlideViewerId
	}
	return ""
}

func (x *MetaData) GetSoComments() string {
	if x != nil {
		return x.SoComments
	}
	return ""
}

func (x *MetaData) GetSoStatusName() string {
	if x != nil {
		return x.SoStatusName
	}
	return ""
}

func (x *MetaData) GetSomaticStatus() string {
	if x != nil {
		return x.SomaticStatus
	}
	return ""
}

func (x *MetaData) GetTmbCohort() float64 {
	if x != nil {
		return x.TmbCohort
	}
	return 0
}

func (x *MetaData) GetTmbCohortPercentile() float64 {
	if x != nil {
		return x.TmbCohortPercentile
	}
	return 0
}

func (x *MetaData) GetTmbScore() float64 {
	if x != nil {
		return x.TmbScore
	}
	return 0
}

func (x *MetaData) GetTmbTtCohort() float64 {
	if x != nil {
		return x.TmbTtCohort
	}
	return 0
}

func (x *MetaData) GetTmbTtPercentile() float64 {
	if x != nil {
		return x.TmbTtPercentile
	}
	return 0
}

func (x *MetaData) GetTumorPurity() string {
	if x != nil {
		return x.TumorPurity
	}
	return ""
}

func (x *MetaData) GetTumorTypeCode() string {
	if x != nil {
		return x.TumorTypeCode
	}
	return ""
}

func (x *MetaData) GetTumorTypeName() string {
	if x != nil {
		return x.TumorTypeName
	}
	return ""
}

type CnvIntragenicVariants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster_1            string     `protobuf:"bytes,1,opt,name=cluster_1,json=cluster1,proto3" json:"cluster_1,omitempty"`
	Cluster_2            string     `protobuf:"bytes,2,opt,name=cluster_2,json=cluster2,proto3" json:"cluster_2,omitempty"`
	CnvVariantId         uint32     `protobuf:"varint,3,opt,name=cnv_variant_id,json=cnvVariantId,proto3" json:"cnv_variant_id,omitempty"`
	ConfidenceCvId       uint32     `protobuf:"varint,4,opt,name=confidence_cv_id,json=confidenceCvId,proto3" json:"confidence_cv_id,omitempty"`
	Cytoband             string     `protobuf:"bytes,5,opt,name=cytoband,proto3" json:"cytoband,omitempty"`
	GeneId               string     `protobuf:"bytes,6,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	Level                *anypb.Any `protobuf:"bytes,7,opt,name=level,proto3" json:"level,omitempty"`
	Oncogenic            *anypb.Any `protobuf:"bytes,8,opt,name=oncogenic,proto3" json:"oncogenic,omitempty"`
	OncokbInterpretation *anypb.Any `protobuf:"bytes,9,opt,name=oncokb_interpretation,json=oncokbInterpretation,proto3" json:"oncokb_interpretation,omitempty"`
	OncokbReported       uint32     `protobuf:"varint,10,opt,name=oncokb_reported,json=oncokbReported,proto3" json:"oncokb_reported,omitempty"`
	OncokbVer            *anypb.Any `protobuf:"bytes,11,opt,name=oncokb_ver,json=oncokbVer,proto3" json:"oncokb_ver,omitempty"`
	RefseqAcc            string     `protobuf:"bytes,12,opt,name=refseq_acc,json=refseqAcc,proto3" json:"refseq_acc,omitempty"`
	Rlevel               *anypb.Any `protobuf:"bytes,13,opt,name=rlevel,proto3" json:"rlevel,omitempty"`
	Treatments           *anypb.Any `protobuf:"bytes,14,opt,name=treatments,proto3" json:"treatments,omitempty"`
	VariantStatusCvId    uint32     `protobuf:"varint,15,opt,name=variant_status_cv_id,json=variantStatusCvId,proto3" json:"variant_status_cv_id,omitempty"`
}

func (x *CnvIntragenicVariants) Reset() {
	*x = CnvIntragenicVariants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnvIntragenicVariants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnvIntragenicVariants) ProtoMessage() {}

func (x *CnvIntragenicVariants) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnvIntragenicVariants.ProtoReflect.Descriptor instead.
func (*CnvIntragenicVariants) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{7}
}

func (x *CnvIntragenicVariants) GetCluster_1() string {
	if x != nil {
		return x.Cluster_1
	}
	return ""
}

func (x *CnvIntragenicVariants) GetCluster_2() string {
	if x != nil {
		return x.Cluster_2
	}
	return ""
}

func (x *CnvIntragenicVariants) GetCnvVariantId() uint32 {
	if x != nil {
		return x.CnvVariantId
	}
	return 0
}

func (x *CnvIntragenicVariants) GetConfidenceCvId() uint32 {
	if x != nil {
		return x.ConfidenceCvId
	}
	return 0
}

func (x *CnvIntragenicVariants) GetCytoband() string {
	if x != nil {
		return x.Cytoband
	}
	return ""
}

func (x *CnvIntragenicVariants) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *CnvIntragenicVariants) GetLevel() *anypb.Any {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *CnvIntragenicVariants) GetOncogenic() *anypb.Any {
	if x != nil {
		return x.Oncogenic
	}
	return nil
}

func (x *CnvIntragenicVariants) GetOncokbInterpretation() *anypb.Any {
	if x != nil {
		return x.OncokbInterpretation
	}
	return nil
}

func (x *CnvIntragenicVariants) GetOncokbReported() uint32 {
	if x != nil {
		return x.OncokbReported
	}
	return 0
}

func (x *CnvIntragenicVariants) GetOncokbVer() *anypb.Any {
	if x != nil {
		return x.OncokbVer
	}
	return nil
}

func (x *CnvIntragenicVariants) GetRefseqAcc() string {
	if x != nil {
		return x.RefseqAcc
	}
	return ""
}

func (x *CnvIntragenicVariants) GetRlevel() *anypb.Any {
	if x != nil {
		return x.Rlevel
	}
	return nil
}

func (x *CnvIntragenicVariants) GetTreatments() *anypb.Any {
	if x != nil {
		return x.Treatments
	}
	return nil
}

func (x *CnvIntragenicVariants) GetVariantStatusCvId() uint32 {
	if x != nil {
		return x.VariantStatusCvId
	}
	return 0
}

type SvVariants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotation           string     `protobuf:"bytes,1,opt,name=annotation,proto3" json:"annotation,omitempty"`
	BreakpointType       string     `protobuf:"bytes,2,opt,name=breakpoint_type,json=breakpointType,proto3" json:"breakpoint_type,omitempty"`
	Comments             string     `protobuf:"bytes,3,opt,name=comments,proto3" json:"comments,omitempty"`
	ConfidenceClass      string     `protobuf:"bytes,4,opt,name=confidence_class,json=confidenceClass,proto3" json:"confidence_class,omitempty"`
	ConnType             string     `protobuf:"bytes,5,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	ConnectionType       string     `protobuf:"bytes,6,opt,name=connection_type,json=connectionType,proto3" json:"connection_type,omitempty"`
	EventInfo            string     `protobuf:"bytes,7,opt,name=event_info,json=eventInfo,proto3" json:"event_info,omitempty"`
	Level                string     `protobuf:"bytes,8,opt,name=level,proto3" json:"level,omitempty"`
	Mapq                 uint32     `protobuf:"varint,9,opt,name=mapq,proto3" json:"mapq,omitempty"`
	NormalReadCount      uint32     `protobuf:"varint,10,opt,name=normal_read_count,json=normalReadCount,proto3" json:"normal_read_count,omitempty"`
	NormalVariantCount   uint32     `protobuf:"varint,11,opt,name=normal_variant_count,json=normalVariantCount,proto3" json:"normal_variant_count,omitempty"`
	Oncogenic            string     `protobuf:"bytes,12,opt,name=oncogenic,proto3" json:"oncogenic,omitempty"`
	OncokbInterpretation string     `protobuf:"bytes,13,opt,name=oncokb_interpretation,json=oncokbInterpretation,proto3" json:"oncokb_interpretation,omitempty"`
	OncokbReported       uint32     `protobuf:"varint,14,opt,name=oncokb_reported,json=oncokbReported,proto3" json:"oncokb_reported,omitempty"`
	PairedEndReadSupport uint32     `protobuf:"varint,15,opt,name=paired_end_read_support,json=pairedEndReadSupport,proto3" json:"paired_end_read_support,omitempty"`
	Rlevel               *anypb.Any `protobuf:"bytes,16,opt,name=rlevel,proto3" json:"rlevel,omitempty"`
	Site1Chrom           string     `protobuf:"bytes,17,opt,name=site1_chrom,json=site1Chrom,proto3" json:"site1_chrom,omitempty"`
	Site1Desc            string     `protobuf:"bytes,18,opt,name=site1_desc,json=site1Desc,proto3" json:"site1_desc,omitempty"`
	Site1Gene            string     `protobuf:"bytes,19,opt,name=site1_gene,json=site1Gene,proto3" json:"site1_gene,omitempty"`
	Site1Pos             uint32     `protobuf:"varint,20,opt,name=site1_pos,json=site1Pos,proto3" json:"site1_pos,omitempty"`
	Site2Chrom           string     `protobuf:"bytes,21,opt,name=site2_chrom,json=site2Chrom,proto3" json:"site2_chrom,omitempty"`
	Site2Desc            string     `protobuf:"bytes,22,opt,name=site2_desc,json=site2Desc,proto3" json:"site2_desc,omitempty"`
	Site2Gene            string     `protobuf:"bytes,23,opt,name=site2_gene,json=site2Gene,proto3" json:"site2_gene,omitempty"`
	Site2Pos             uint32     `protobuf:"varint,24,opt,name=site2_pos,json=site2Pos,proto3" json:"site2_pos,omitempty"`
	SplitReadSupport     uint32     `protobuf:"varint,25,opt,name=split_read_support,json=splitReadSupport,proto3" json:"split_read_support,omitempty"`
	SvClassName          string     `protobuf:"bytes,26,opt,name=sv_class_name,json=svClassName,proto3" json:"sv_class_name,omitempty"`
	SvDesc               string     `protobuf:"bytes,27,opt,name=sv_desc,json=svDesc,proto3" json:"sv_desc,omitempty"`
	SvLength             uint32     `protobuf:"varint,28,opt,name=sv_length,json=svLength,proto3" json:"sv_length,omitempty"`
	SvVariantId          uint32     `protobuf:"varint,29,opt,name=sv_variant_id,json=svVariantId,proto3" json:"sv_variant_id,omitempty"`
	Treatments           string     `protobuf:"bytes,30,opt,name=treatments,proto3" json:"treatments,omitempty"`
	TumorReadCount       uint32     `protobuf:"varint,31,opt,name=tumor_read_count,json=tumorReadCount,proto3" json:"tumor_read_count,omitempty"`
	TumorVariantCount    uint32     `protobuf:"varint,32,opt,name=tumor_variant_count,json=tumorVariantCount,proto3" json:"tumor_variant_count,omitempty"`
	VariantStatusName    string     `protobuf:"bytes,33,opt,name=variant_status_name,json=variantStatusName,proto3" json:"variant_status_name,omitempty"`
}

func (x *SvVariants) Reset() {
	*x = SvVariants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvVariants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvVariants) ProtoMessage() {}

func (x *SvVariants) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvVariants.ProtoReflect.Descriptor instead.
func (*SvVariants) Descriptor() ([]byte, []int) {
	return file_mpath_proto_rawDescGZIP(), []int{8}
}

func (x *SvVariants) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

func (x *SvVariants) GetBreakpointType() string {
	if x != nil {
		return x.BreakpointType
	}
	return ""
}

func (x *SvVariants) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *SvVariants) GetConfidenceClass() string {
	if x != nil {
		return x.ConfidenceClass
	}
	return ""
}

func (x *SvVariants) GetConnType() string {
	if x != nil {
		return x.ConnType
	}
	return ""
}

func (x *SvVariants) GetConnectionType() string {
	if x != nil {
		return x.ConnectionType
	}
	return ""
}

func (x *SvVariants) GetEventInfo() string {
	if x != nil {
		return x.EventInfo
	}
	return ""
}

func (x *SvVariants) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *SvVariants) GetMapq() uint32 {
	if x != nil {
		return x.Mapq
	}
	return 0
}

func (x *SvVariants) GetNormalReadCount() uint32 {
	if x != nil {
		return x.NormalReadCount
	}
	return 0
}

func (x *SvVariants) GetNormalVariantCount() uint32 {
	if x != nil {
		return x.NormalVariantCount
	}
	return 0
}

func (x *SvVariants) GetOncogenic() string {
	if x != nil {
		return x.Oncogenic
	}
	return ""
}

func (x *SvVariants) GetOncokbInterpretation() string {
	if x != nil {
		return x.OncokbInterpretation
	}
	return ""
}

func (x *SvVariants) GetOncokbReported() uint32 {
	if x != nil {
		return x.OncokbReported
	}
	return 0
}

func (x *SvVariants) GetPairedEndReadSupport() uint32 {
	if x != nil {
		return x.PairedEndReadSupport
	}
	return 0
}

func (x *SvVariants) GetRlevel() *anypb.Any {
	if x != nil {
		return x.Rlevel
	}
	return nil
}

func (x *SvVariants) GetSite1Chrom() string {
	if x != nil {
		return x.Site1Chrom
	}
	return ""
}

func (x *SvVariants) GetSite1Desc() string {
	if x != nil {
		return x.Site1Desc
	}
	return ""
}

func (x *SvVariants) GetSite1Gene() string {
	if x != nil {
		return x.Site1Gene
	}
	return ""
}

func (x *SvVariants) GetSite1Pos() uint32 {
	if x != nil {
		return x.Site1Pos
	}
	return 0
}

func (x *SvVariants) GetSite2Chrom() string {
	if x != nil {
		return x.Site2Chrom
	}
	return ""
}

func (x *SvVariants) GetSite2Desc() string {
	if x != nil {
		return x.Site2Desc
	}
	return ""
}

func (x *SvVariants) GetSite2Gene() string {
	if x != nil {
		return x.Site2Gene
	}
	return ""
}

func (x *SvVariants) GetSite2Pos() uint32 {
	if x != nil {
		return x.Site2Pos
	}
	return 0
}

func (x *SvVariants) GetSplitReadSupport() uint32 {
	if x != nil {
		return x.SplitReadSupport
	}
	return 0
}

func (x *SvVariants) GetSvClassName() string {
	if x != nil {
		return x.SvClassName
	}
	return ""
}

func (x *SvVariants) GetSvDesc() string {
	if x != nil {
		return x.SvDesc
	}
	return ""
}

func (x *SvVariants) GetSvLength() uint32 {
	if x != nil {
		return x.SvLength
	}
	return 0
}

func (x *SvVariants) GetSvVariantId() uint32 {
	if x != nil {
		return x.SvVariantId
	}
	return 0
}

func (x *SvVariants) GetTreatments() string {
	if x != nil {
		return x.Treatments
	}
	return ""
}

func (x *SvVariants) GetTumorReadCount() uint32 {
	if x != nil {
		return x.TumorReadCount
	}
	return 0
}

func (x *SvVariants) GetTumorVariantCount() uint32 {
	if x != nil {
		return x.TumorVariantCount
	}
	return 0
}

func (x *SvVariants) GetVariantStatusName() string {
	if x != nil {
		return x.VariantStatusName
	}
	return ""
}

var File_mpath_proto protoreflect.FileDescriptor

var file_mpath_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x4d, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x79,
	0x73, 0x32, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x79, 0x73, 0x32, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6d, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x70, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x07,
	0x53, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x75, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x75,
	0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x75, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x4d, 0x65, 0x61, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x10,
	0x4d, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x43,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb8, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36,
	0x0a, 0x13, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x53, 0x6e,
	0x70, 0x52, 0x13, 0x73, 0x6e, 0x70, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x2d, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6e, 0x76, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6e, 0x76, 0x2d,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x73, 0x6e, 0x70, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x53, 0x6e, 0x70, 0x52, 0x10, 0x73, 0x6e, 0x70, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x6c, 0x2d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x10, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6c,
	0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e,
	0x53, 0x6e, 0x70, 0x52, 0x10, 0x73, 0x6e, 0x70, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x2d, 0x65,
	0x78, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x17, 0x63, 0x6e, 0x76, 0x5f, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6e, 0x76, 0x49, 0x6e, 0x74, 0x72,
	0x61, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x17,
	0x63, 0x6e, 0x76, 0x2d, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x2d, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x73, 0x76, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53,
	0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x76, 0x2d, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x70, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x53, 0x6e, 0x70, 0x52, 0x13, 0x73, 0x6e, 0x70, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x6c, 0x2d, 0x65, 0x78, 0x6f, 0x6e, 0x69, 0x63, 0x2d, 0x6e, 0x70, 0x22, 0xfb,
	0x10, 0x0a, 0x03, 0x53, 0x6e, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x61, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x65,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x44, 0x4e, 0x41, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x44, 0x4e, 0x41, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73,
	0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x76, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x6d, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x6d, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x64,
	0x54, 0x75, 0x6d, 0x6f, 0x72, 0x41, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x5f, 0x74, 0x75, 0x6d,
	0x6f, 0x72, 0x5f, 0x64, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x08, 0x64, 0x54, 0x75, 0x6d, 0x6f, 0x72, 0x44, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x64,
	0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x64, 0x54, 0x75, 0x6d, 0x6f, 0x72, 0x52, 0x64, 0x12,
	0x38, 0x0a, 0x0d, 0x64, 0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x76, 0x66, 0x72, 0x65, 0x71,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x64, 0x54,
	0x75, 0x6d, 0x6f, 0x72, 0x56, 0x66, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x62, 0x53,
	0x4e, 0x50, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x53,
	0x4e, 0x50, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x6d, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6d, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x64, 0x6d, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x72, 0x65, 0x76, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x6d, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6d, 0x70,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6f, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6d,
	0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6d, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70,
	0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x73,
	0x70, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x66, 0x72, 0x65, 0x71, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x66, 0x72, 0x65, 0x71, 0x31, 0x30, 0x30, 0x30, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x41, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64,
	0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x66, 0x72, 0x65,
	0x71, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x56,
	0x66, 0x72, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x15,
	0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x6e, 0x63,
	0x6f, 0x6b, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6e, 0x63, 0x6f,
	0x6b, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e,
	0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x56, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x73, 0x54, 0x75, 0x6d,
	0x6f, 0x72, 0x41, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f,
	0x64, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08,
	0x73, 0x54, 0x75, 0x6d, 0x6f, 0x72, 0x44, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x5f, 0x74, 0x75,
	0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x73, 0x54, 0x75, 0x6d, 0x6f, 0x72, 0x52, 0x64, 0x12, 0x38, 0x0a, 0x0d,
	0x73, 0x5f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x76, 0x66, 0x72, 0x65, 0x71, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x73, 0x54, 0x75, 0x6d, 0x6f,
	0x72, 0x56, 0x66, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6e, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6e, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x41, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x64, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x75, 0x6d, 0x6f, 0x72, 0x44, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f,
	0x76, 0x66, 0x72, 0x65, 0x71, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x75, 0x6d,
	0x6f, 0x72, 0x56, 0x66, 0x72, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x07, 0x0a,
	0x0b, 0x43, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0f, 0x63, 0x6e, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6e, 0x76, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6e, 0x76, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6e, 0x76, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x63,
	0x6e, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6e, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x76, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6e, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6e, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x76, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x50, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63,
	0x12, 0x33, 0x0a, 0x15, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x56, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x76, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x0c, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x79,
	0x73, 0x32, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x79, 0x73, 0x32, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x62, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x62, 0x78, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x62, 0x78, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x62, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x2d, 0x70, 0x61, 0x72, 0x74, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6d, 0x6f, 0x72,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x6d,
	0x70, 0x5f, 0x61, 0x6c, 0x79, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6d, 0x70, 0x41, 0x6c, 0x79, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x6d, 0x70, 0x5f, 0x61, 0x6c, 0x79, 0x73, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x6d, 0x70, 0x41, 0x6c, 0x79, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6d, 0x70, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6d, 0x70, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6d, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x6d,
	0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6d, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x6f, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x74, 0x5f, 0x61, 0x6c, 0x79, 0x73, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x74, 0x41, 0x6c, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11,
	0x64, 0x74, 0x5f, 0x64, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x74, 0x44, 0x6d, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x73, 0x69, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x61, 0x73, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x73, 0x69, 0x73, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x72, 0x65, 0x76,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x72, 0x65, 0x76,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x69, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x73, 0x69, 0x2d, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x69, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x2d, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6d, 0x62, 0x5f,
	0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6d,
	0x62, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6d, 0x62, 0x5f, 0x63,
	0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6d, 0x62, 0x43, 0x6f, 0x68, 0x6f, 0x72,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6d, 0x62, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x6d, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6d, 0x62, 0x5f,
	0x74, 0x74, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6d, 0x62, 0x54, 0x74, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6d, 0x62, 0x5f, 0x74, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6d, 0x62, 0x54, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x75, 0x6d, 0x6f,
	0x72, 0x5f, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x75, 0x6d, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75,
	0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x05, 0x0a, 0x15,
	0x43, 0x6e, 0x76, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x76, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67,
	0x65, 0x6e, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x15, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x6f, 0x6e, 0x63, 0x6f, 0x6b,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6e, 0x63, 0x6f,
	0x6b, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x56, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x41, 0x63, 0x63, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x76, 0x49,
	0x64, 0x22, 0xb8, 0x09, 0x0a, 0x0a, 0x53, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x70, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x71, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x6e, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x15, 0x6f,
	0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x6e, 0x63, 0x6f,
	0x6b, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x6e, 0x63, 0x6f, 0x6b, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6e, 0x63, 0x6f, 0x6b,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x31, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x31, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x31, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x31, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x31, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x74, 0x65, 0x31, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x31, 0x50, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x74, 0x65, 0x32, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x74, 0x65, 0x32, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x74, 0x65, 0x32, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x74, 0x65, 0x32, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69,
	0x74, 0x65, 0x32, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x74, 0x65, 0x32, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74,
	0x65, 0x32, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69,
	0x74, 0x65, 0x32, 0x50, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x76, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x76, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x76, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x76, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x75,
	0x6d, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x75, 0x6d, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x75, 0x6d, 0x6f, 0x72,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x32, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x65, 0x72, 0x79,
	0x6e, 0x69, 0x63, 0x65, 0x64, 0x61, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x70, 0x61, 0x74, 0x68,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpath_proto_rawDescOnce sync.Once
	file_mpath_proto_rawDescData = file_mpath_proto_rawDesc
)

func file_mpath_proto_rawDescGZIP() []byte {
	file_mpath_proto_rawDescOnce.Do(func() {
		file_mpath_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpath_proto_rawDescData)
	})
	return file_mpath_proto_rawDescData
}

var file_mpath_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mpath_proto_goTypes = []interface{}{
	(*MPathSegData)(nil),          // 0: MPathSegData
	(*SegData)(nil),               // 1: SegData
	(*MPathVariantData)(nil),      // 2: MPathVariantData
	(*Result)(nil),                // 3: Result
	(*Snp)(nil),                   // 4: Snp
	(*CnvVariants)(nil),           // 5: CnvVariants
	(*MetaData)(nil),              // 6: MetaData
	(*CnvIntragenicVariants)(nil), // 7: CnvIntragenicVariants
	(*SvVariants)(nil),            // 8: SvVariants
	nil,                           // 9: MPathVariantData.ResultsEntry
	(*anypb.Any)(nil),             // 10: google.protobuf.Any
}
var file_mpath_proto_depIdxs = []int32{
	1,  // 0: MPathSegData.seg_data:type_name -> SegData
	9,  // 1: MPathVariantData.results:type_name -> MPathVariantData.ResultsEntry
	4,  // 2: Result.snp_indel_silent_np:type_name -> Snp
	5,  // 3: Result.cnv_variants:type_name -> CnvVariants
	4,  // 4: Result.snp_indel_silent:type_name -> Snp
	6,  // 5: Result.meta_data:type_name -> MetaData
	4,  // 6: Result.snp_indel_exonic:type_name -> Snp
	7,  // 7: Result.cnv_intragenic_variants:type_name -> CnvIntragenicVariants
	8,  // 8: Result.sv_variants:type_name -> SvVariants
	4,  // 9: Result.snp_indel_exonic_np:type_name -> Snp
	10, // 10: Snp.d_tumor_ad:type_name -> google.protobuf.Any
	10, // 11: Snp.d_tumor_dp:type_name -> google.protobuf.Any
	10, // 12: Snp.d_tumor_rd:type_name -> google.protobuf.Any
	10, // 13: Snp.d_tumor_vfreq:type_name -> google.protobuf.Any
	10, // 14: Snp.s_tumor_ad:type_name -> google.protobuf.Any
	10, // 15: Snp.s_tumor_dp:type_name -> google.protobuf.Any
	10, // 16: Snp.s_tumor_rd:type_name -> google.protobuf.Any
	10, // 17: Snp.s_tumor_vfreq:type_name -> google.protobuf.Any
	10, // 18: CnvVariants.rlevel:type_name -> google.protobuf.Any
	10, // 19: CnvIntragenicVariants.level:type_name -> google.protobuf.Any
	10, // 20: CnvIntragenicVariants.oncogenic:type_name -> google.protobuf.Any
	10, // 21: CnvIntragenicVariants.oncokb_interpretation:type_name -> google.protobuf.Any
	10, // 22: CnvIntragenicVariants.oncokb_ver:type_name -> google.protobuf.Any
	10, // 23: CnvIntragenicVariants.rlevel:type_name -> google.protobuf.Any
	10, // 24: CnvIntragenicVariants.treatments:type_name -> google.protobuf.Any
	10, // 25: SvVariants.rlevel:type_name -> google.protobuf.Any
	3,  // 26: MPathVariantData.ResultsEntry.value:type_name -> Result
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_mpath_proto_init() }
func file_mpath_proto_init() {
	if File_mpath_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpath_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPathSegData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPathVariantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnvVariants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnvIntragenicVariants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvVariants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpath_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpath_proto_goTypes,
		DependencyIndexes: file_mpath_proto_depIdxs,
		MessageInfos:      file_mpath_proto_msgTypes,
	}.Build()
	File_mpath_proto = out.File
	file_mpath_proto_rawDesc = nil
	file_mpath_proto_goTypes = nil
	file_mpath_proto_depIdxs = nil
}
