// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: mpath-gml.proto

package mpath_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MPathGmlVariantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleCount uint32                `protobuf:"varint,1,opt,name=sample_count,json=sample-count,proto3" json:"sample_count,omitempty"`
	Results     map[string]*ResultGml `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Disclaimer  string                `protobuf:"bytes,3,opt,name=disclaimer,proto3" json:"disclaimer,omitempty"`
}

func (x *MPathGmlVariantData) Reset() {
	*x = MPathGmlVariantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPathGmlVariantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPathGmlVariantData) ProtoMessage() {}

func (x *MPathGmlVariantData) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPathGmlVariantData.ProtoReflect.Descriptor instead.
func (*MPathGmlVariantData) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{0}
}

func (x *MPathGmlVariantData) GetSampleCount() uint32 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

func (x *MPathGmlVariantData) GetResults() map[string]*ResultGml {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MPathGmlVariantData) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

type ResultGml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnvIntragenicVariantsGml []*CnvIntragenicVariantsGml `protobuf:"bytes,1,rep,name=cnv_intragenic_variants_gml,json=cnv-intragenic-variants-gml,proto3" json:"cnv_intragenic_variants_gml,omitempty"`
	CnvVariantsGml           []*CnvVariantsGml           `protobuf:"bytes,2,rep,name=cnv_variants_gml,json=cnv-variants-gml,proto3" json:"cnv_variants_gml,omitempty"`
	MetaData                 *MetaDataGml                `protobuf:"bytes,3,opt,name=meta_data,json=meta-data,proto3" json:"meta_data,omitempty"`
	SnpIndelGml              []*SnpIndelGml              `protobuf:"bytes,4,rep,name=snp_indel_gml,json=snp-indel-gml,proto3" json:"snp_indel_gml,omitempty"`
}

func (x *ResultGml) Reset() {
	*x = ResultGml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultGml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultGml) ProtoMessage() {}

func (x *ResultGml) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultGml.ProtoReflect.Descriptor instead.
func (*ResultGml) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{1}
}

func (x *ResultGml) GetCnvIntragenicVariantsGml() []*CnvIntragenicVariantsGml {
	if x != nil {
		return x.CnvIntragenicVariantsGml
	}
	return nil
}

func (x *ResultGml) GetCnvVariantsGml() []*CnvVariantsGml {
	if x != nil {
		return x.CnvVariantsGml
	}
	return nil
}

func (x *ResultGml) GetMetaData() *MetaDataGml {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *ResultGml) GetSnpIndelGml() []*SnpIndelGml {
	if x != nil {
		return x.SnpIndelGml
	}
	return nil
}

type CnvIntragenicVariantsGml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chromosome        string `protobuf:"bytes,1,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	ClinicalSignedOut string `protobuf:"bytes,2,opt,name=clinical_signed_out,json=clinical-signed-out,proto3" json:"clinical_signed_out,omitempty"`
	Cluster           string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	CnvClassName      string `protobuf:"bytes,4,opt,name=cnv_class_name,json=cnvClassName,proto3" json:"cnv_class_name,omitempty"`
	Cytoband          string `protobuf:"bytes,5,opt,name=cytoband,proto3" json:"cytoband,omitempty"`
	GeneId            string `protobuf:"bytes,6,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	Interpretation    string `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
}

func (x *CnvIntragenicVariantsGml) Reset() {
	*x = CnvIntragenicVariantsGml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnvIntragenicVariantsGml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnvIntragenicVariantsGml) ProtoMessage() {}

func (x *CnvIntragenicVariantsGml) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnvIntragenicVariantsGml.ProtoReflect.Descriptor instead.
func (*CnvIntragenicVariantsGml) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{2}
}

func (x *CnvIntragenicVariantsGml) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetClinicalSignedOut() string {
	if x != nil {
		return x.ClinicalSignedOut
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetCnvClassName() string {
	if x != nil {
		return x.CnvClassName
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetCytoband() string {
	if x != nil {
		return x.Cytoband
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *CnvIntragenicVariantsGml) GetInterpretation() string {
	if x != nil {
		return x.Interpretation
	}
	return ""
}

type CnvVariantsGml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chromosome        string  `protobuf:"bytes,1,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	ClinicalSignedOut string  `protobuf:"bytes,2,opt,name=clinical_signed_out,json=clinical-signed-out,proto3" json:"clinical_signed_out,omitempty"`
	CnvClassName      string  `protobuf:"bytes,3,opt,name=cnv_class_name,json=cnvClassName,proto3" json:"cnv_class_name,omitempty"`
	Cytoband          string  `protobuf:"bytes,4,opt,name=cytoband,proto3" json:"cytoband,omitempty"`
	GeneFoldChange    float64 `protobuf:"fixed64,5,opt,name=gene_fold_change,json=geneFoldChange,proto3" json:"gene_fold_change,omitempty"`
	GeneId            string  `protobuf:"bytes,6,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	GenePValue        float64 `protobuf:"fixed64,7,opt,name=gene_p_value,json=genePValue,proto3" json:"gene_p_value,omitempty"`
	Interpretation    string  `protobuf:"bytes,8,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	PanelName         string  `protobuf:"bytes,9,opt,name=panel_name,json=panelName,proto3" json:"panel_name,omitempty"`
	PathScore         string  `protobuf:"bytes,10,opt,name=path_score,json=pathScore,proto3" json:"path_score,omitempty"`
}

func (x *CnvVariantsGml) Reset() {
	*x = CnvVariantsGml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnvVariantsGml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnvVariantsGml) ProtoMessage() {}

func (x *CnvVariantsGml) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnvVariantsGml.ProtoReflect.Descriptor instead.
func (*CnvVariantsGml) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{3}
}

func (x *CnvVariantsGml) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *CnvVariantsGml) GetClinicalSignedOut() string {
	if x != nil {
		return x.ClinicalSignedOut
	}
	return ""
}

func (x *CnvVariantsGml) GetCnvClassName() string {
	if x != nil {
		return x.CnvClassName
	}
	return ""
}

func (x *CnvVariantsGml) GetCytoband() string {
	if x != nil {
		return x.Cytoband
	}
	return ""
}

func (x *CnvVariantsGml) GetGeneFoldChange() float64 {
	if x != nil {
		return x.GeneFoldChange
	}
	return 0
}

func (x *CnvVariantsGml) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *CnvVariantsGml) GetGenePValue() float64 {
	if x != nil {
		return x.GenePValue
	}
	return 0
}

func (x *CnvVariantsGml) GetInterpretation() string {
	if x != nil {
		return x.Interpretation
	}
	return ""
}

func (x *CnvVariantsGml) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *CnvVariantsGml) GetPathScore() string {
	if x != nil {
		return x.PathScore
	}
	return ""
}

type SnpIndelGml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AaChange          string  `protobuf:"bytes,1,opt,name=aa_change,json=aaChange,proto3" json:"aa_change,omitempty"`
	AcmgCriteria      string  `protobuf:"bytes,2,opt,name=acmg_criteria,json=acmgCriteria,proto3" json:"acmg_criteria,omitempty"`
	AlleleDepth       uint32  `protobuf:"varint,3,opt,name=allele_depth,json=alleleDepth,proto3" json:"allele_depth,omitempty"`
	AltAllele         string  `protobuf:"bytes,4,opt,name=alt_allele,json=altAllele,proto3" json:"alt_allele,omitempty"`
	CDNAChange        string  `protobuf:"bytes,5,opt,name=cDNA_change,json=cDNAChange,proto3" json:"cDNA_change,omitempty"`
	Chromosome        string  `protobuf:"bytes,6,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	ClinicalSignedOut string  `protobuf:"bytes,7,opt,name=clinical_signed_out,json=clinical-signed-out,proto3" json:"clinical_signed_out,omitempty"`
	Clinvar           string  `protobuf:"bytes,8,opt,name=clinvar,proto3" json:"clinvar,omitempty"`
	DbSNPId           string  `protobuf:"bytes,9,opt,name=dbSNP_id,json=dbSNPId,proto3" json:"dbSNP_id,omitempty"`
	Depth             uint32  `protobuf:"varint,10,opt,name=depth,proto3" json:"depth,omitempty"`
	ExonNum           string  `protobuf:"bytes,11,opt,name=exon_num,json=exonNum,proto3" json:"exon_num,omitempty"`
	GeneId            string  `protobuf:"bytes,12,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	Interpretation    string  `protobuf:"bytes,13,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	Mafreq_1000G      string  `protobuf:"bytes,14,opt,name=mafreq_1000g,json=mafreq1000g,proto3" json:"mafreq_1000g,omitempty"`
	PanelName         string  `protobuf:"bytes,15,opt,name=panel_name,json=panelName,proto3" json:"panel_name,omitempty"`
	PathScore         string  `protobuf:"bytes,16,opt,name=path_score,json=pathScore,proto3" json:"path_score,omitempty"`
	RefAllele         string  `protobuf:"bytes,17,opt,name=ref_allele,json=refAllele,proto3" json:"ref_allele,omitempty"`
	StartPosition     uint32  `protobuf:"varint,18,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	TranscriptId      string  `protobuf:"bytes,19,opt,name=transcript_id,json=transcriptId,proto3" json:"transcript_id,omitempty"`
	VariantFreq       float64 `protobuf:"fixed64,20,opt,name=variant_freq,json=variantFreq,proto3" json:"variant_freq,omitempty"`
}

func (x *SnpIndelGml) Reset() {
	*x = SnpIndelGml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnpIndelGml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnpIndelGml) ProtoMessage() {}

func (x *SnpIndelGml) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnpIndelGml.ProtoReflect.Descriptor instead.
func (*SnpIndelGml) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{4}
}

func (x *SnpIndelGml) GetAaChange() string {
	if x != nil {
		return x.AaChange
	}
	return ""
}

func (x *SnpIndelGml) GetAcmgCriteria() string {
	if x != nil {
		return x.AcmgCriteria
	}
	return ""
}

func (x *SnpIndelGml) GetAlleleDepth() uint32 {
	if x != nil {
		return x.AlleleDepth
	}
	return 0
}

func (x *SnpIndelGml) GetAltAllele() string {
	if x != nil {
		return x.AltAllele
	}
	return ""
}

func (x *SnpIndelGml) GetCDNAChange() string {
	if x != nil {
		return x.CDNAChange
	}
	return ""
}

func (x *SnpIndelGml) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *SnpIndelGml) GetClinicalSignedOut() string {
	if x != nil {
		return x.ClinicalSignedOut
	}
	return ""
}

func (x *SnpIndelGml) GetClinvar() string {
	if x != nil {
		return x.Clinvar
	}
	return ""
}

func (x *SnpIndelGml) GetDbSNPId() string {
	if x != nil {
		return x.DbSNPId
	}
	return ""
}

func (x *SnpIndelGml) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *SnpIndelGml) GetExonNum() string {
	if x != nil {
		return x.ExonNum
	}
	return ""
}

func (x *SnpIndelGml) GetGeneId() string {
	if x != nil {
		return x.GeneId
	}
	return ""
}

func (x *SnpIndelGml) GetInterpretation() string {
	if x != nil {
		return x.Interpretation
	}
	return ""
}

func (x *SnpIndelGml) GetMafreq_1000G() string {
	if x != nil {
		return x.Mafreq_1000G
	}
	return ""
}

func (x *SnpIndelGml) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *SnpIndelGml) GetPathScore() string {
	if x != nil {
		return x.PathScore
	}
	return ""
}

func (x *SnpIndelGml) GetRefAllele() string {
	if x != nil {
		return x.RefAllele
	}
	return ""
}

func (x *SnpIndelGml) GetStartPosition() uint32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *SnpIndelGml) GetTranscriptId() string {
	if x != nil {
		return x.TranscriptId
	}
	return ""
}

func (x *SnpIndelGml) GetVariantFreq() float64 {
	if x != nil {
		return x.VariantFreq
	}
	return 0
}

type MetaDataGml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alys2SampleId   string `protobuf:"bytes,1,opt,name=alys2sample_id,json=alys2sampleId,proto3" json:"alys2sample_id,omitempty"`
	DmpAlysTaskName string `protobuf:"bytes,2,opt,name=dmp_alys_task_name,json=dmpAlysTaskName,proto3" json:"dmp_alys_task_name,omitempty"`
	DmpPatientId    string `protobuf:"bytes,3,opt,name=dmp_patient_id,json=dmpPatientId,proto3" json:"dmp_patient_id,omitempty"`
	DmpSampleId     string `protobuf:"bytes,4,opt,name=dmp_sample_id,json=dmpSampleId,proto3" json:"dmp_sample_id,omitempty"`
	Gender          uint32 `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	GenePanel       string `protobuf:"bytes,6,opt,name=gene_panel,json=gene-panel,proto3" json:"gene_panel,omitempty"`
	LegacyPatientId string `protobuf:"bytes,7,opt,name=legacy_patient_id,json=legacyPatientId,proto3" json:"legacy_patient_id,omitempty"`
	LegacySampleId  string `protobuf:"bytes,8,opt,name=legacy_sample_id,json=legacySampleId,proto3" json:"legacy_sample_id,omitempty"`
	RetrieveStatus  uint32 `protobuf:"varint,9,opt,name=retrieve_status,json=retrieveStatus,proto3" json:"retrieve_status,omitempty"`
	SampleCoverage  uint32 `protobuf:"varint,10,opt,name=sample_coverage,json=sampleCoverage,proto3" json:"sample_coverage,omitempty"`
	SoComments      string `protobuf:"bytes,11,opt,name=so_comments,json=soComments,proto3" json:"so_comments,omitempty"`
	SoStatusName    string `protobuf:"bytes,12,opt,name=so_status_name,json=soStatusName,proto3" json:"so_status_name,omitempty"`
}

func (x *MetaDataGml) Reset() {
	*x = MetaDataGml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpath_gml_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaDataGml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaDataGml) ProtoMessage() {}

func (x *MetaDataGml) ProtoReflect() protoreflect.Message {
	mi := &file_mpath_gml_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaDataGml.ProtoReflect.Descriptor instead.
func (*MetaDataGml) Descriptor() ([]byte, []int) {
	return file_mpath_gml_proto_rawDescGZIP(), []int{5}
}

func (x *MetaDataGml) GetAlys2SampleId() string {
	if x != nil {
		return x.Alys2SampleId
	}
	return ""
}

func (x *MetaDataGml) GetDmpAlysTaskName() string {
	if x != nil {
		return x.DmpAlysTaskName
	}
	return ""
}

func (x *MetaDataGml) GetDmpPatientId() string {
	if x != nil {
		return x.DmpPatientId
	}
	return ""
}

func (x *MetaDataGml) GetDmpSampleId() string {
	if x != nil {
		return x.DmpSampleId
	}
	return ""
}

func (x *MetaDataGml) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *MetaDataGml) GetGenePanel() string {
	if x != nil {
		return x.GenePanel
	}
	return ""
}

func (x *MetaDataGml) GetLegacyPatientId() string {
	if x != nil {
		return x.LegacyPatientId
	}
	return ""
}

func (x *MetaDataGml) GetLegacySampleId() string {
	if x != nil {
		return x.LegacySampleId
	}
	return ""
}

func (x *MetaDataGml) GetRetrieveStatus() uint32 {
	if x != nil {
		return x.RetrieveStatus
	}
	return 0
}

func (x *MetaDataGml) GetSampleCoverage() uint32 {
	if x != nil {
		return x.SampleCoverage
	}
	return 0
}

func (x *MetaDataGml) GetSoComments() string {
	if x != nil {
		return x.SoComments
	}
	return ""
}

func (x *MetaDataGml) GetSoStatusName() string {
	if x != nil {
		return x.SoStatusName
	}
	return ""
}

var File_mpath_gml_proto protoreflect.FileDescriptor

var file_mpath_gml_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x67, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x47, 0x6d, 0x6c, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x47, 0x6d, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x46, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x47, 0x6d, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x6d, 0x6c,
	0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6e, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x6d, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6e, 0x76, 0x49, 0x6e, 0x74, 0x72, 0x61,
	0x67, 0x65, 0x6e, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x47, 0x6d, 0x6c,
	0x52, 0x1b, 0x63, 0x6e, 0x76, 0x2d, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x69, 0x63,
	0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x2d, 0x67, 0x6d, 0x6c, 0x12, 0x3b, 0x0a,
	0x10, 0x63, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x47, 0x6d, 0x6c, 0x52, 0x10, 0x63, 0x6e, 0x76, 0x2d, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x2d, 0x67, 0x6d, 0x6c, 0x12, 0x2a, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6d, 0x6c, 0x52, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x6c, 0x5f, 0x67, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x53, 0x6e, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x6c, 0x47, 0x6d, 0x6c, 0x52, 0x0d, 0x73, 0x6e, 0x70,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x2d, 0x67, 0x6d, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x18, 0x43,
	0x6e, 0x76, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x47, 0x6d, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6e, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6e, 0x76,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x79, 0x74,
	0x6f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x79, 0x74,
	0x6f, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x43, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x47, 0x6d, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x2d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6e, 0x76, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6e, 0x76, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x50, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9a, 0x05, 0x0a, 0x0b, 0x53, 0x6e, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x6c, 0x47, 0x6d, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x6d, 0x67, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x6d, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x44, 0x4e, 0x41, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x44, 0x4e, 0x41, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x62, 0x53,
	0x4e, 0x50, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x53,
	0x4e, 0x50, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x31, 0x30, 0x30, 0x30, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x66, 0x72, 0x65, 0x71, 0x31, 0x30, 0x30, 0x30, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x46, 0x72, 0x65, 0x71, 0x22, 0xd2, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x47, 0x6d, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x79, 0x73, 0x32, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6c, 0x79, 0x73, 0x32, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x64, 0x6d, 0x70, 0x5f, 0x61, 0x6c, 0x79, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6d, 0x70, 0x41, 0x6c, 0x79,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6d, 0x70,
	0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x6d, 0x70, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x64, 0x6d, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x77, 0x69,
	0x6c, 0x73, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpath_gml_proto_rawDescOnce sync.Once
	file_mpath_gml_proto_rawDescData = file_mpath_gml_proto_rawDesc
)

func file_mpath_gml_proto_rawDescGZIP() []byte {
	file_mpath_gml_proto_rawDescOnce.Do(func() {
		file_mpath_gml_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpath_gml_proto_rawDescData)
	})
	return file_mpath_gml_proto_rawDescData
}

var file_mpath_gml_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_mpath_gml_proto_goTypes = []interface{}{
	(*MPathGmlVariantData)(nil),      // 0: MPathGmlVariantData
	(*ResultGml)(nil),                // 1: ResultGml
	(*CnvIntragenicVariantsGml)(nil), // 2: CnvIntragenicVariantsGml
	(*CnvVariantsGml)(nil),           // 3: CnvVariantsGml
	(*SnpIndelGml)(nil),              // 4: SnpIndelGml
	(*MetaDataGml)(nil),              // 5: MetaDataGml
	nil,                              // 6: MPathGmlVariantData.ResultsEntry
}
var file_mpath_gml_proto_depIdxs = []int32{
	6, // 0: MPathGmlVariantData.results:type_name -> MPathGmlVariantData.ResultsEntry
	2, // 1: ResultGml.cnv_intragenic_variants_gml:type_name -> CnvIntragenicVariantsGml
	3, // 2: ResultGml.cnv_variants_gml:type_name -> CnvVariantsGml
	5, // 3: ResultGml.meta_data:type_name -> MetaDataGml
	4, // 4: ResultGml.snp_indel_gml:type_name -> SnpIndelGml
	1, // 5: MPathGmlVariantData.ResultsEntry.value:type_name -> ResultGml
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_mpath_gml_proto_init() }
func file_mpath_gml_proto_init() {
	if File_mpath_gml_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpath_gml_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPathGmlVariantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_gml_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultGml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_gml_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnvIntragenicVariantsGml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_gml_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnvVariantsGml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_gml_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnpIndelGml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpath_gml_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaDataGml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpath_gml_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpath_gml_proto_goTypes,
		DependencyIndexes: file_mpath_gml_proto_depIdxs,
		MessageInfos:      file_mpath_gml_proto_msgTypes,
	}.Build()
	File_mpath_gml_proto = out.File
	file_mpath_gml_proto_rawDesc = nil
	file_mpath_gml_proto_goTypes = nil
	file_mpath_gml_proto_depIdxs = nil
}
